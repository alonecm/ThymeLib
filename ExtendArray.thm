/*
引用的库文件：ExCore.thm
！！使用前请确保安装到Algodoo中！！
*/


//队列对象(尾入头出)
QueueObject=(arr)=>{
	_:=alloc;
	_.clear:=null;//清空数组
	_.length:=null;//获取长度
	_.getElement:=null;//获取指定元素
	_.getContent:=null;//获取全部内容
	_.getCut:=null;//获取裁切数组
	_.Enqueue:=null;//入队
	_.Dequeue:=null;//出队
	_->{
		content:=ListObject(arr);//数组内容
		clear={content.clear};//清空数组
		length={content.length};//获取长度
		getElement=(index)=>{content.getElement(index)};//获取指定元素
		getContent={content.getContent};//获取全部内容
		getCut=(start,length)=>{content.getCut(start,length)};//获取裁切数组
		Enqueue=(element)=>{content.add(element)};//入队
		Dequeue={content.removeAt(0)};//出队
	};
	_;
};

//栈对象(尾部出入栈)
StackObject=(arr)=>{
	_:=alloc;
	_.clear:=null;//清空数组
	_.length:=null;//获取长度
	_.getElement:=null;//获取指定元素
	_.getContent:=null;//获取全部内容
	_.getCut:=null;//获取裁切数组
	_.push:=null;//入栈
	_.pop:=null;//出栈
	_->{
		content:=ListObject(arr);//数组内容
		clear={content.clear};//清空数组
		length={content.length};//获取长度
		getElement=(index)=>{content.getElement(index)};//获取指定元素
		getContent={content.getContent};//获取全部内容
		getCut=(start,length)=>{content.getCut(start,length)};//获取裁切数组
		push=(element)=>{content.add(element)};//入栈
		pop={content.removeAt(content.length-1)};//出栈
	};
	_;
};

//列表对象
ListObject=(arr)=>{
	_:=alloc;
	_.initialize:=null;//初始化
	_.add:=null;//追加元素
	_.addRange:=null;//追加多个元素
	_.clear:=null;//清空列表
	_.length:=null;//获取长度
	_.insert:=null;//插入元素
	_.insertRange:=null;//插入多个元素
	_.getElement:=null;//获取指定元素
	_.setElement:=null;//修改指定元素
	_.remove:=null;//移除第一个指定元素
	_.removeAll:=null;//移除所有指定元素
	_.removeAt:=null;//移除指定索引处的元素
	_.getContent:=null;//获取全部内容
	_.getCut:=null;//获取裁切数组
	_->{
		content:=null;//数组内容
		//初始化
		initialize={
			content=WritableArrayObject(ExArray.getLength(arr));
			content.setValue(arr);
		};
		//追加元素
		add=(element)=>{
			content.expand(1);
			content.setElement(content.length-1,element)
		};
		//追加多个元素
		addRange=(arr)=>{
			lastLength:=content.length;
			content.expand(ExArray.getLength(arr));
			ExCore.sFor(lastLength,content.length,(i)=>{
				content.setElement(i,arr(i-lastLength));
			});
		};
		//清空列表
		clear={content=WritableArrayObject(0)};
		//获取长度
		length={content.length};
		//插入元素
		insert=(index,new_element)=>{
			i_index:=index;
			index<0?{i_index=0}:{};
			index>=content.length?{i_index=content.length}:{};
			content.expand(1);
			ExCore.sFor(0,content.length-(i_index+1),(i)=>{
				content.swap((content.length-1)-i,(content.length-2)-i);
			});
			content.setElement(i_index,new_element);
		};
		//插入多个元素
		insertRange=(index,arr)=>{
			i_index:=index;
			index<0?{i_index=0}:{};
			index>=content.length?{i_index=content.length}:{};
			lastLength:=content.length;
			len:=ExArray.getLength(arr);
			content.expand(len);
			content.copyTo(content,index,index+len,lastLength-index);
			ExCore.sFor(0,ExArray.getLength(arr),(i)=>{
				content.setElement(index+i,arr(i));
			});
			getContent;
		};
		//获取指定元素
		getElement=(index)=>{content.getElement(index)};
		//修改指定元素
		setElement=(index,new_element)=>{content.setElement(index,new_element)};
		//移除第一个指定元素
		remove=(element)=>{
			removeAt(ExArray.indexOf(getContent,element));
		};
		//移除所有指定元素
		removeAll=(element)=>{
			values:=ExArray.removeAllElement(getContent,element);
			content=WritableArrayObject(ExArray.getLength(values));
			content.setValue(values);
		};
		//移除指定索引处的元素
		removeAt=(index)=>{
			index>=0&&content.length>0?{
				content.copyTo(content,index+1,index,content.length-(index+1));
				content.shrink(1);
			}:{};
		};
		//获取全部内容
		getContent={content.getContent};
		//获取裁切数组
		getCut=(start,length)=>{content.getCut(start,length)};
	};
	_.initialize;
	_;
};

//可写数组
WritableArrayObject=(init_Length)=>{
	_:=alloc;
	_.initialize:=null;//初始化
	_.setValue:=null;//设定值
	_.length:=null;//获取数组长度
	_.getContent:=null;//获取全部内容
	_.getElement:=null;//获取指定元素的值
	_.setElement:=null;//设定指定元素的值
	_.getCut:=null;//获取裁切数组
	_.expand:=null;//扩大数组（追加）
	_.shrink:=null;//缩小数组（切尾）
	_.copyTo:=null;//拷贝指定范围的数据到指定数组中
	_.swap:=null;//交换两元素
	_->{
		arr_length:=0;
		arr_storage:=null;
		arr_current:=null;
		//初始化
		initialize={
			arr_length=init_Length;//初始化长度
			arr_storage=alloc;//初始化内存
		};
		//设定值
		setValue=(arr)=>{
			len:=ExArray.getLength(arr);
			len<=arr_length?{
				ExCore.sFor(0,len,(i)=>{
					setElement(i,arr(i));
				});
				getContent;
			}:{print("所提供数组长度过长！")};
		};
		//获取数组长度
		length={arr_length};
		//获取全部内容
		getContent={
			arr_current==null?{//若未设定当前值则获取全部值
				arr_current=[];
				ExCore.sFor(0,arr_length,(i)=>{
					arr_current=arr_current++[getElement(i)];
				});
			}:{};
			arr_current;
		};
		//获取指定元素的值
		getElement=(index)=>{
			index>=arr_length||index<0?{
				print("索引"+index+"不在数组范围内！");
			}:{
				value:=eval("arr_storage.e"+index);
				value==undefined?{null}:{value};
			};
		};
		//设定指定元素的值
		setElement=(index,new_element)=>{
			index>=arr_length||index<0?{
				print("索引"+index+"不在数组范围内！");
			}:{
				arr_current=null;
				eval("arr_storage.e"+index+":=new_element")
			};
		};
		//获取裁切数组
		getCut=(start,length)=>{
			n_arr:=WritableArrayObject(0);
			start>=0&&length>=0?{
				len:=start+length;
				len>arr_length?{len=arr_length}:{};
				n_arr.expand(len-start);
				ExCore.sFor(start,len,(i)=>{n_arr.setElement(i-start,getElement(i))});
				n_arr;
			}:{n_arr};
		};
		//扩大数组
		expand=(expend_size)=>{
			expend_size>=0?{
				arr_current=null;
				ExCore.wFor(arr_length,arr_length+expend_size,(i)=>{
					eval("arr_storage.e"+i+":=null");
				});
				arr_length=arr_length+expend_size;
			}:{print("扩大的大小不能为负！")};
		};
		//缩小数组
		shrink=(shrink_size)=>{
			shrink_size>=0&&shrink_size<=arr_length?{
				arr_current=null;
				ExCore.wFor(arr_length-shrink_size,arr_length,(i)=>{
					eval("arr_storage.e"+i+":=null");
				});
				arr_length=arr_length-shrink_size;
			}:{print("缩小的大小不能为负！")};
		};
		//拷贝指定范围的数据到指定数组中
		copyTo=(target_WritableArray,source_start,target_start,copyLength)=>{
			source_start>=0&&target_start>=0?{
				copyLength>0?{
					//获取源终点（超出范围则限定为范围内）
					source_end:=source_start+copyLength;
					source_end>arr_length?{source_end=arr_length}:{};
					//获取目标终点，拷贝长度应为源起点与源终点的差值相同
					target_end:=target_start+(source_end-source_start);
					//限制源终点，如果源长度比目标数组长，则应将源数组的多余部分剪去多余长度取剩下的部分
					target_end>target_WritableArray.length?{
						source_end=source_end-(target_end-target_WritableArray.length);//裁掉多余长度
					}:{};
					values:=getContent;
					ExCore.sFor(source_start,source_end,(i)=>{
						target_WritableArray.setElement(target_start+(i-source_start),values(i));
					});
					target_WritableArray.getContent;
				}:{
					copyLength==0?{
						target_WritableArray.getContent;
					}:{print("拷贝长度不能小于0！")};
				};
			}:{print("拷贝起点不能为负数！")};
		};
		//交换两元素
		swap=(index1,index2)=>{
			index1>=arr_length||index1<0?{
				print("索引"+index1+"不在数组范围内！");
			}:{
				index2>=arr_length||index2<0?{
					print("索引"+index2+"不在数组范围内！");
				}:{
					temp:=getElement(index1);
					setElement(index1,getElement(index2));
					setElement(index2,temp);
				};
			};
		};
	};
	_.initialize;
	_;
};


//只读数组对象
ReadOnlyArrayObject=(arr)=>{
	_:=alloc;
	_.length:=null;//获取长度
	_.getContent:=null;//获取全部内容
	_.getElement:=null;//获取指定索引的元素
	_.getCut:=null;//获取裁切数组
	_->{
		content:=arr;//数组内容
		length={ExArray.getLength(content)};//获取长度
		getContent={content};//获取全部内容
		getElement=(index)=>{content(index)};//获取指定索引的元素
		getCut=(start,length)=>{ReadOnlyArrayObject(ExArray.cut(content,start,length))};//获取裁切数组
	};
	_;
};


//原始数组处理
ExArray={
	_:=alloc;
	_.getLength:=null;//获取数组长度
	_.getEmpty:=null;//获取空数组
	_.getCustomArray:=null;//获取自定义重复内容的数组
	_.getLast:=null;//获取最后一位元素
	_.getFirst:=null;//获取第一位元素
	_.modify:=null;//修改数组
	_.cut:=null;//裁切数组
	_.addElement:=null;//追加元素
	_.swapElement:=null;//交换两个指定位置处的元素
	_.insertElement:=null;//插入元素
	_.removeElement:=null;//移除符合要求的第一个元素
	_.removeAllElement:=null;//移除符合要求的全部元素
	_.removeAt:=null;//移除指定索引的元素
	_.indexOf:=null;//获取第一个指定元素的索引
	_->{
		//获取数组长度
		getLength=(arr)=>{string.length(arr)};
		//获取空数组
		getEmpty={[]};
		//获取自定义重复内容的数组
		getCustomArray=(element,length)=>{
			n_arr:=[];
			ExCore.sFor(0,length,(i)=>{
				n_arr=n_arr++[element];
			});
			n_arr;
		};
		//获取最后一位元素
		getLast=(arr)=>{arr(string.length(arr)-1)};
		//获取第一位元素
		getFirst=(arr)=>{arr(0)};
		//修改数组
		modify=(arr,index,new_element)=>{
			n_arr:=[];
			ExCore.sFor(0,string.length(arr),(i)=>{
				i==index?{n_arr=n_arr++[new_element]}:{n_arr=n_arr++arr[i]};
			});
			n_arr;
		};
		//裁切数组
		cut=(arr,start,length)=>{
			n_arr:=[];
			length>0?{
				start+length<=string.length(arr)?{
					ExCore.sFor(start,start+length,(i)=>{n_arr=n_arr++arr[i]})
				}:{
					ExCore.sFor(start,string.length(arr),(i)=>{n_arr=n_arr++arr[i]})
				};
			}:{};
			n_arr;
		};
		//追加元素
		addElement=(arr,element)=>{arr++[element]};
		//交换两个指定位置处的元素
		swapElement=(arr,p1,p2)=>{
			(p1>=0&&p1<string.length(arr))&&(p1>=0&&p1<string.length(arr))?{
				n_arr:=[];
				element1:=arr[p2];
				element2:=arr[p1];
				ExCore.sFor(0,string.length(arr),(i)=>{
					i==p1?{n_arr=n_arr++element1}:{
						i==p2?{n_arr=n_arr++element2}:{
							n_arr=n_arr++arr[i]
						};
					};
				});
				n_arr;
			}:{arr};
		};
		//插入元素
		insertElement=(arr,index,element)=>{
			n_arr:=[];
			string.length(arr)>0?{//有元素才能插入
				index<0?{n_arr=n_arr++[element]}:{};
				ExCore.sFor(0,string.length(arr),(i)=>{
					i==index?{n_arr=n_arr++[element]}:{};
					n_arr=n_arr++arr[i];
				});
				index>=string.length(arr)?{n_arr=n_arr++[element]}:{};
			}:{n_arr=n_arr++[element]};
			n_arr;
		};
		//移除符合要求的全部元素
		removeAllElement=(arr,element)=>{
			n_arr:=[];
			ExCore.sFor(0,string.length(arr),(i)=>{
				arr(i)!=element?{n_arr=n_arr++arr[i]}:{};
			});
			n_arr;
		};
		//移除符合要求的第一个元素
		removeElement=(arr,element)=>{
			n_arr:=[];
			flag:=true;
			ExCore.sFor(0,string.length(arr),(i)=>{
				flag?{
					arr(i)==element?{flag=false}:{n_arr=n_arr++arr[i]}
				}:{
					n_arr=n_arr++arr[i];
				};
			});
			n_arr;
		};
		//移除指定索引的元素
		removeAt=(arr,index)=>{
			index<0||index>=string.length(arr)?{
				arr;
			}:{
				n_arr:=[];
				ExCore.sFor(0,index,(i)=>{
					n_arr=n_arr++arr[i];
				});
				ExCore.sFor(index+1,string.length(arr),(i)=>{
					n_arr=n_arr++arr[i];
				});
				n_arr;
			};
		};
		//获取第一个指定元素的索引
		indexOf=(arr,element)=>{
			index := -1;
			ExCore.bFor(0,ExArray.getLength(arr)-1,(i)=>{
				arr(i)==element?{
					index=i;
					false;
				}:{true};
			});
			index;
		};
	};
	_;
};
ExArray=ExArray;
